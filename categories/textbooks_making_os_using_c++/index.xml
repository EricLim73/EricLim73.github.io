<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Textbooks_Making_OS_Using_C&#43;&#43; on YodaModa</title>
    <link>https://EricLim73.github.io/categories/textbooks_making_os_using_c&#43;&#43;/</link>
    <description>Recent content in Textbooks_Making_OS_Using_C&#43;&#43; on YodaModa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>ljheric7@gmail.com (Eric Lim)</managingEditor>
    <webMaster>ljheric7@gmail.com (Eric Lim)</webMaster>
    <lastBuildDate>Fri, 29 Dec 2023 14:31:57 +0900</lastBuildDate><atom:link href="https://EricLim73.github.io/categories/textbooks_making_os_using_c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CH_1 &amp; 2</title>
      <link>https://EricLim73.github.io/posts/textbooks/making_os_using_c&#43;&#43;/ch_12/</link>
      <pubDate>Fri, 29 Dec 2023 14:31:57 +0900</pubDate>
      <author>ljheric7@gmail.com (Eric Lim)</author>
      <guid>https://EricLim73.github.io/posts/textbooks/making_os_using_c&#43;&#43;/ch_12/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;C++로 나만의 운영체제 만들기&amp;rdquo; 내용 정리 (운영체제 내용 복습용)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h1&gt;
&lt;p&gt;기본적으로 책에서 사용되는 툴의 소개와 빌드 환견 테스트를 진행합니다.&lt;/p&gt;
&lt;h3 id=&#34;툴-소개&#34;&gt;툴 소개&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WinImage&lt;br&gt;
이미지 파일 (.IMA) 생성하기 위한 툴. 30일 체험판이여서 장기간 사용은 못할 것 같다.&lt;/li&gt;
&lt;li&gt;ImDick&lt;br&gt;
WinImage 대체품&lt;/li&gt;
&lt;li&gt;Qemu
가상 이미지 실행용 툴. 최신버젼의 경우 실습환경에서 빌드된 이미지가 안돌아가는 오류가 있어 제공되는 버젼을 사용&lt;/li&gt;
&lt;li&gt;SkyOS
제공되는 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chapter-2&#34;&gt;Chapter 2&lt;/h1&gt;
&lt;h2 id=&#34;프로세스-process&#34;&gt;프로세스 (Process)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, a process is the instance of a computer program that is being executed by one or many threads.&lt;br&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Process_(computing)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;프로세스-레이아웃-process-layout&#34;&gt;프로세스 레이아웃 (Process Layout)&lt;/h3&gt;
&lt;p&gt;프로세스는 메모리에 상주하여 작동하는 프로그램을 의미한다. 멀티태스킹 운영체제의 경우 한 프로세스의 독점적인 시스템 자원을 막기 위해 프로세스 별 자원 사용 시간을 지정한다 (스케줄링 =&amp;gt; Time Slicing). 프로세스가 메모리에 로드됐을 때의 레이아웃은 스택, 힙, 데이터 영역, 텍스트 영역으로 구성된다. 기본적인 내용이여서 추가적으로 윈도우에서의 프로세스 레이아웃을 찾은 결과, 꽤 자세하게 내용이 작성된 2013년도에 포스팅된 자료를 찾을 수 있었다.
&lt;a href=&#34;https://www.securitysift.com/windows-exploit-development-part-1-basics/&#34;&gt;Windows Exploit Development&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kernel Land&lt;/strong&gt;&lt;br&gt;
운영체제가 사용하기 위해 reserve된 메모리로, 흔히 말하는 &lt;code&gt;kernel space&lt;/code&gt;다. 모든 프로세스는 각자의 &lt;code&gt;user space&lt;/code&gt;를 갖고 &lt;code&gt;kernel space&lt;/code&gt;의 경우 모두가 같은 공간을 가르킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEB &amp;amp; TEB&lt;/strong&gt;&lt;br&gt;
윈도우의 모든 프로세스는 EPROCESS라고 해서 프로세스 동작에 필요한 정보를 담고 있는 구조체들를 갖고 있다. 대부분의 구조체가 커널에 저장되지만, user space에 저장되는 구조체가 &lt;code&gt;&amp;quot;Process Environment Block (PEB)&amp;quot;&lt;/code&gt;이다. 이 구조체는 프로세스 동작에 필요한 유저 모드 파라미터들을 저장하고 있다 (DLL 경로, executable 주소, 힙 위치 등등).&lt;br&gt;
TEB는 철자에서 알 수 있듯이 &lt;code&gt;&amp;quot;Thread Environment Block(TEB)&amp;quot;&lt;/code&gt;를 의미한다. 역확도 그냥 쓰레드 용 PEB인 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DLLs&lt;/strong&gt;&lt;br&gt;
윈도우에서 사용되는 동적 라이브러리 (Dynamic Link Libraries)가 상주하게 되는 메모리다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Program Image&lt;/strong&gt;&lt;br&gt;
프로세스를 실행한 실행파일 (.exe)가 상주하는 메모리다. 위에서 언급한 텍스트 영역과 테이터 영역이 이부분에 해당된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;br&gt;
흔히 malloc을 통해 동적할당 받는 메모리 영역을 나타낸다. 할당된 메모리를 해제하지 않는 한 계속해서 그 메모리는 점유된 상태가 된다. 흔히 메모리 풀로써의 역활을 한다. 힙 메모리의 경우 프로세스 내부에서 생성된 쓰레드들이라면 같은 프로세스 힙을 접근한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;br&gt;
지역 변수를 포함하여 동작하는 함수들을 저장하는 영역이다. 흔히 &amp;ldquo;stackFrame&amp;quot;이라고 불리며, 함수 종료 시 지워진다. 각 프로세스 별로 독립된 스택을 갖고, 각 쓰레드 별로 독립된 스택을 갖고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;text-align: center&#34;&gt;&lt;img width=&#34;1133&#34; alt=&#34;win32 process memory map&#34; src=&#34;https://github.com/EricLim73/EricLim73.github.io/assets/57621369/02689777-11a1-4c6f-99e6-21439fd48c95&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;프로세스-컨텍스트-process-layout&#34;&gt;프로세스 컨텍스트 (Process Layout)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Context switching&lt;/code&gt;은 현재 실행 중인 프로세스에서 다른 프로세스로 실행되는 주체를 바꾸는 과정을 의미한다. 정확히 말하면 프로세스가 아닌 쓰레드의 실행을 멈추는 것이다. 프로세스는 무조건 하나의 쓰레드로 이루어져 있다. 이렇게 다른 프로세스를 작동시키다가 다시 원래 프로세스로 돌아올려고 한다면 프로세스의 대한 정보를 어딘가에 저장해야 된다. 그러한 정보를 관리하는 것이 &lt;code&gt;&amp;quot;Process Control Block&amp;quot;(PCB)&lt;/code&gt;이다. 컨텍스트 스위칭에 따른 프로세스의 상태는 대기, 실행, 블록, 정지가 있다.&lt;/p&gt;
&lt;h3 id=&#34;thread&#34;&gt;Thread&lt;/h3&gt;
&lt;p&gt;프로세스와 마찬가지로 쓰레드 또한 자신의 정보를 저장하는 &lt;code&gt;Thread Control Block (TCB)&lt;/code&gt;를 들고 있다. 본인이 소속된 프로세스의 PCB에 TCB 리스트를 저장하는 포인터로 접근 가능하다. 위에서도 언급했지만 쓰레드는 본인들 개인이 관리하는 stack을 제외하면 이들이 소속된 프로세스의 자원을 이들 모두가 같이 쓰는 방식으로 동작한다. 동시에 write가 가능한 메모리 영역에서의 두개 이상의 쓰레드의 다툼(?)이 발생하는 상황을 &lt;code&gt;**&amp;quot;race condition&amp;quot;**&lt;/code&gt; 이라고 한다. 해결방법이나 자세한 내용은 게임엔진 책에서 한 번 나온 내용이라 생략한다.&lt;/p&gt;
&lt;h3 id=&#34;콜스택&#34;&gt;콜스택&lt;/h3&gt;
&lt;p&gt;스택이나 큐 같은 간단한 내용은 넘어간다. x86 아키텍쳐의 경우 콜스택이 높은 주소에서 낮을 주소로 쌓입니다. 일반적인 스택인데 옆에 주소를 나타내는 부분이 위로 갈 수록 0x00000000에 가까워진다고 생각하면 된다.
&lt;a href=&#34;https://redirect.cs.umbc.edu/courses/undergraduate/313/spring05/burt_katz/lectures/Lect07/subprogramStack.html&#34;&gt;Subprograms and the Stack&lt;/a&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt;
&lt;img width=&#34;1133&#34; src=&#34;https://github.com/EricLim73/EricLim73.github.io/assets/57621369/04893cc6-8094-41c7-bfde-fcc72dfcd771&#34;&gt; 
&lt;/p&gt;
&lt;p&gt;상세하게 스택이 쌓이는 과정과 내용을 설명하는 페이지를 찾았다. 요약하자면 함수를 부른 caller로 돌아갈 수 있도록 가르키는 포인터를 사용하여 동작한다는 내용이다.&lt;/p&gt;
&lt;h3 id=&#34;호출규약-calling-convention&#34;&gt;호출규약 (Calling Convention)&lt;/h3&gt;
&lt;p&gt;책에서는 x86 기준으로 설명된다. 위에서 언근된 스택 관리에 있어서 누가 정보를 정리하는지를 설정하는 방법이다. 책에 적힌 차트 그대로 가져온 내용이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;호출규약&lt;/th&gt;
&lt;th&gt;Parameter 전달 순서&lt;/th&gt;
&lt;th&gt;Stackframe 정리 담당&lt;/th&gt;
&lt;th&gt;네임 맹글링&lt;/th&gt;
&lt;th&gt;etc.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;__cdecl&lt;/td&gt;
&lt;td&gt;오른쪽 -&amp;gt; 왼쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;_FOO&lt;/td&gt;
&lt;td&gt;_stdcall보다 코드가 커진다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__stdcall&lt;/td&gt;
&lt;td&gt;오른쪽 -&amp;gt; 왼쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;_FOO12&lt;/td&gt;
&lt;td&gt;모든 시스템에서 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__fastcall&lt;/td&gt;
&lt;td&gt;오른쪽 -&amp;gt; 왼쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;@FOO@12&lt;/td&gt;
&lt;td&gt;매개변수를 최대한 레지스터에 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__thiscall&lt;/td&gt;
&lt;td&gt;오른쪽 -&amp;gt; 왼쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;this 매개변수가 ECX 레지스터에 전달&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__pascall&lt;/td&gt;
&lt;td&gt;왼쪽 -&amp;gt; 오른쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;__naked&lt;/td&gt;
&lt;td&gt;오른쪽 -&amp;gt; 왼쪽&lt;/td&gt;
&lt;td&gt;Caller&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;사용자 지정 프롤로그와 에필로그를 필요로 할때 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;윈도우 컴파일러 &lt;code&gt;cl&lt;/code&gt;로 작성할 경우 /Gd(__cdecl), /Gr(__fastcall), /Gv(__vectorcall), /Gz(__stdcall)로 컴파일 시 위 규약이 명시되지 않은 모든 함수에 일괄적용할 수 있다. 콜스택에 매개변수가 정리되는 과정의 책임을 누가 갖는지, 그리고 어떻게 형성되고 저장되는지를 정하는 키워드라고 보면 될 것 같다. 책에서 중요하다고 강조하는 키워드는 &lt;code&gt;__naked&lt;/code&gt;로, 이 키워드가 활용하여 함수를 호출하면 프로그래머가 직접 스택을 정리하는 작업을 수행해야 된다고 한다.&lt;/p&gt;
&lt;h3 id=&#34;네임-맹글링-name-mangling&#34;&gt;네임 맹글링 (Name Mangling)&lt;/h3&gt;
&lt;p&gt;이부분은 Handmade Hero 영상에서 더 자세하게 알려준다. 결론부터 말하면 C++에서 함수 오버로딩을 지원하는데, 같은 이름의 다른 함수들을 전부 처리하기에는 backward-compatible 해야되는 C 링커로는 부족했다. 그래서 그 호환성을 위해 등록되는 함수명 앞에 다른 함수들과 구분지어주는 문자열을 추가하는 방법이 네임 맹글링이다. 이는 컴파일러마다 다른 맹글링 방침이 있기 때문에 항상 같은 결과가 나오지는 않는다. 보통 C 언어로 작성된 dll을 C++에 연결하여 사용할 경우 맹글링 문제가 발생하며, 이경우 키워드 &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt;를 함수명에 추가해주면 해결된다고 한다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
